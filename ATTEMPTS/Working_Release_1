; Simulate time puncher
; When you see a '^' it is a comment reffering to the line above
;       
.ORIG x3000
            AND   R1, R1, #0 ; Clear R1
            AND   R2, R2, #0 ; Clear R2
            LD    R3, CONVERT_ASC_TO_DEC ; Converts ASCII to Decimal within Register (#-48)
       
START       LEA   R0, PROMPT_START ; Load prompt for start time
            JSR   GET_CHAR
            ST    R2, Start_HH    ;Saving Start (HH:--) after return 
            ST    R5, Start_MM    ;Saving Start (--:MM) after return 

            LEA   R0, PROMPT_END   ; Load prompt for end time
            JSR   GET_CHAR
            ST    R2, End_HH    ;Saving End (HH:--) after return 
            ST    R5, End_MM    ;Saving End (--:MM) after return 
            
            LD  R2, Start_HH
            LD  R5, Start_MM
            JSR  STARTCALC
            ST    R3, STARTINMIN
            
            AND   R2, R2, #0 ; Clear
            AND   R5, R5, #0 ; Clear 
            
            LD    R2, End_HH    
            LD    R5, End_MM
            JSR   STARTCALC         ;5
            ST    R3, ENDINMIN 
       
            AND   R4, R4, #0 ; Clear
            LD  R3, ENDINMIN
            LD  R4, STARTINMIN
            
            NOT R4, R4 
            ADD R4, R4, #1
            ADD R5, R3, R4 
            ST R5, TOTAL_DIFF_IN_MIN
            
            AND R1, R1, #0 
            AND R5, R5, #0
            AND R3, R3, #0
            LD  R1, DIVIDE_MIN_TO_HOUR ;#-60
            LD R5, TOTAL_DIFF_IN_MIN
            LD R6, MAX_BEFORE_NEG
            
DIVIDE     
            ADD R5, R5, R1   ; Adding Total Diff with -60 until - 
            ADD R3, R3, #1 ; Adding how many times we subtrack 60 and this will be our hour 
            ADD R4, R5, R6
            BRp DIVIDE

            ST R3, PREP_OUTPUT_HOUR ;R3 is our hour output 
            ST R5, PREP_OUTPUT_MIN ;R5 is our min output 
            
            AND R2, R2, #0 ; Clear R2
            AND R3, R3, #0 ; Clear R3
            AND R4, R4, #0 ; Clear R4 
            LD R1, PREP_OUTPUT_HOUR
            JSR PREP_TO_DISPLAY
            ST R1, CONVERTED_HOUR_ONES_PLACE
            ST R3, CONVERTED_HOUR_TENS_PLACE
            
            
            AND R1, R1, #0 ; Clear R1
            AND R2, R2, #0 ; Clear R2
            AND R3, R3, #0 ; Clear R3
            AND R4, R4, #0 ; Clear R4 
            LD R1, PREP_OUTPUT_MIN
            JSR PREP_TO_DISPLAY
            ST R1,CONVERTED_MIN_ONES_PLACE
            ST R3, CONVERTED_MIN_TENS_PLACE
            
;FINISHED_and_DISPLAYING______________________________________

LEA R0, OUTPUT
PUTS
LD R0, CONVERTED_HOUR_TENS_PLACE
OUT 
LD R0, CONVERTED_HOUR_ONES_PLACE
OUT
LD R0, CONVERTED_MIN_TENS_PLACE 
OUT 
LD R0, CONVERTED_MIN_ONES_PLACE
OUT
LEA R0, THANK_YOU
PUTS   
   
       
EXIT        TRAP X25   ; HALT

;__SubRoutine_________________________________________________________________________
GET_CHAR    PUTS
            GETC
            OUT
            ADD     R2,R0, #0   ; Store value into R2 
            ADD     R2,R2,R3    ; Converting to ASCII R2 = "A"
            GETC
            OUT
            ADD     R4,R0,#0    ; Store value into R3
            ADD     R4,R4,R3    ;Converting to ASCII R4 = "B"
            GETC
            OUT
            ADD     R5,R0, #0   ; Store value into R5
            ADD     R5,R5,R3    ; Converting to ASCII R5 = "C"
            GETC
            OUT
            ADD     R6,R0,#0    ; Store value into R6
            ADD     R6,R6,R3    ;Converting to ASCII R6 = "D"
            ;JSR     CONVERT_TENS_PLACE
        
            LD      R1, TEN
            ST      R4, SaveR4
            AND     R4,R4, #0   ;Clear R4
            
MULTITENA:
            ADD     R4,R4,R2   ;Add tens value to itself 10 times
            ADD     R1,R1, #-1  ;decreasing counter
            BRp     MULTITENA    ;Continue loop until 0
            
            AND     R2, R2, #0  ;Clear R2
            ADD     R2,R2,R4    ;Move R4 result back to R2 
            LD      R4, SaveR4  ;Loading original value for "B"
            ADD     R2 , R2 , R4 ;Adding "A" tens place and "B" result in R2 
            ;R2 Successfully holds the hour "(HH:--)" portion
            
            LD      R1, TEN
            AND     R4,R4, #0   ;Clear R4
MULTITENC:
            ADD     R4,R4,R5   ;Add tens value to itself 10 times
            ADD     R1,R1, #-1  ;decreasing counter
            BRp     MULTITENC    ;Continue loop until 0
            
            AND     R5, R5, #0  ;Clear R5
            ADD     R5,R5,R4    ;Move result to R5 
            ADD     R5, R5 , R6 ; Adding "C" and "D" together 
            ; R5 Successfully holds the minutes "(--:MM)" Portion
            RET
;_SubRoutine^^^________________________________________________________________________

STARTCALC:                      ;3 THEN 5
            ;(HH:--) Saved in R2
            ;(--:MM) Saved in R5  
            LD      R1, HOUR    ;Load 60
            AND     R3,R3, #0   ;Clear R3
            AND     R4,R4, #0   ;Clear R4
            AND     R6,R6, #0   ;Clear R3
            
MULTISIXTY:

            ADD     R4,R4,R2    ;Add tens value to itself 60 times
            ADD     R1,R1, #-1  ;decreasing counter
            BRp     MULTISIXTY  ;Continue loop until 0

            ADD     R3,R4, R5   ;Adding HH and MM result in R3 
            ;R3 Successfully holds the hour combined HH and MM as just MINUTES

            RET
            
;_SUBROUTINE_PREP_TO_DISPLAY_____________________________________

PREP_TO_DISPLAY:
		LD  R6, nTEN
		LD  R5, Max_one 
		LD  R2, ASCII
		
CONDITION
        ADD R4, R1, R5 ;Check if the value is single digit 
        BRn NEXT
tens_sub  
        ADD R1, R1, R6 
        ADD R3, R3, #1
        ADD R4, R1, R5
        BRp tens_sub 
        
        ADD R3, R3, R2 
NEXT
        ADD R1, R1, R2 ; convert DEC to ASCII 
        
        RET


;_Variables________________________________________________________
CONVERT_ASC_TO_DEC  .FILL #-48
ASCII	            .FILL #48 
TEN                 .FILL  #10

START_TIME          .BLKW 2
END_TIME            .BLKW 2
PROMPT_START        .STRINGZ "Enter start time using military Time(HH:MM): "
PROMPT_END          .STRINGZ "\nEnter end time using military Time(HH:MM): "
ERRORMSG            .STRINGZ "Not a valid input"

SaveR1              .FILL   x0000
SaveR2              .FILL   x0000
SaveR3              .FILL   x0000
SaveR4              .FILL   x0000
SaveR5              .FILL   x0000
SaveR6              .FILL   x0000
Start_HH            .FILL   x0000
Start_MM            .FILL   x0000
End_HH              .FILL   x0000
End_MM              .FILL   x0000

STARTINMIN          .FILL   x0000
ENDINMIN            .FILL   x0000
TOTAL_DIFF_IN_MIN   .FILL   x0000
DIVIDE_MIN_TO_HOUR  .FILL   #-60
MAX_BEFORE_NEG      .FILL   #-59
HOUR                .FILL   #60

PREP_OUTPUT_MIN     .FILL   x0000
PREP_OUTPUT_HOUR    .FILL   x0000

CONVERTED_HOUR_TENS_PLACE   .FILL   x0000
CONVERTED_HOUR_ONES_PLACE   .FILL   x0000
CONVERTED_MIN_ONES_PLACE    .FILL   x0000
CONVERTED_MIN_TENS_PLACE    .FILL   x0000

nTEN 	        .FILL #-10
Max_one         .FILL #-9
TENS_DEC        .FILL x0000
ONES_DEC        .FILL x0000

OUTPUT	      	.STRINGZ "\n\n--- \nAnswer:"
THANK_YOU       .STRINGZ "\n\nTime Calculation is complete\nThank you "

            .END
